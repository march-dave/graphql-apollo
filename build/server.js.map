{"version":3,"sources":["../src/server.js"],"names":["port","process","env","PORT","app","pubSub","PubSub","server","ApolloServer","typeDefs","schema","resolvers","Query","introspection","playground","context","db","applyMiddleware","listen","console","log","graphqlPath"],"mappings":";;AAAA;;;;AAOA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AAZA,IAAMA,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,MAAM,wBAAZ;;AAEA;AACA;;AAOA;;AAEA;AACA;;AAEA,IAAMC,SAAS,IAAIC,2BAAJ,EAAf;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAMC,SAAS,IAAIC,iCAAJ,CAAiB;AAC9BC,YAAUC,gBADoB;AAE9BC,aAAW;AACTC;AACA;AACA;AACA;AACA;AACA;;AANS,GAFmB;;AAY9B;AACA;AACA;;AAEAC,iBAAe,IAhBe;AAiB9BC,cAAY,IAjBkB;AAkB9BC,WAAS;AACPC,oBADO;AAEPX;AAFO;AAlBqB,CAAjB,CAAf;AAuBAE,OAAOU,eAAP,CAAuB,EAAEb,QAAF,EAAvB;;AAEAA,IAAIc,MAAJ,CAAWlB,IAAX,EAAiB,YAAM;AACrBmB,UAAQC,GAAR,iCAA0Cb,OAAOc,WAAjD,SAAgErB,IAAhE;AACD,CAFD","file":"server.js","sourcesContent":["import express from \"express\";\nconst port = process.env.PORT || 8080;\nconst app = express();\n\n// import bodyParser from \"body-parser\";\n// import cors from \"cors\";\n\nimport db from \"./db\";\nimport Query from \"./resolvers/Query\";\nimport User from \"./resolvers/User\";\nimport schema from \"./schema\";\n\n// Apollo 2\nimport { ApolloServer, PubSub } from \"apollo-server-express\";\n// import jwt from \"jsonwebtoken\";\n// import bcrypt from \"bcryptjs\";\n\nconst pubSub = new PubSub();\n\n// the __dirname is the current directory from where the script is running\n// app.use(express.static(__dirname));\n\n// app.use(cors(), bodyParser.json());\n// app.use(bodyParser.urlencoded({ extended: true }));\n\n// send the user to index html page inspite of the url\n// app.get(\"*\", (req, res) => {\n//   res.sendFile(path.resolve(__dirname, \"index.html\"));\n// });\n\n// const getById = id => {\n//   console.log(id);\n//   const filtered = roomtypes.filter(c => (c.id === id ? c : null));\n//   return filtered[0];\n// };\n\n// const getAuthorById = id => {\n//   const filtered = author.filter(c => (c.id === id ? c : null));\n//   return filtered[0];\n// }\n\n// const resolvers = {\n//   Query: {\n//     getRoomTypes: () => roomtypes,\n//     getRoomType: (_, { id }) => getById(id),\n\n//     getUser: () => users,\n\n//     getAuthor: (_, { id }) => getAuthorById(id)\n//   },\n\n//   Mutation: {\n//     setRoomType: (_, args) => {\n//       const roomtype = { room: args.room, details: args.details };\n//       roomtypes.push(roomtype);\n//       return roomtype;\n//     },\n\n//     login: (_, args) => {\n//       let loginuser;\n//       const hashedpassword = bcrypt.hash(args.password, 12);\n\n//       loginuser = { email: args.email, password: hashedpassword };\n\n//       const tokengen = jwt.sign(\n//         loginuser,\n//         \"JWT_SECRET_ROOKHOTELKIOSK_PLEASE_CHANGE_WHEN_READY\"\n//       );\n//       loginuser.hashed = tokengen;\n//       return loginuser;\n//     },\n\n//     verify: (_, args) => {\n//       const validPassword = bcrypt.compare(\n//         args.password,\n//         \"$2a$12$BTBmIbBelCsPLmBWg9.o1egRtf1UaYvloSbYqa.y5QQNvBzUI5RQe\"\n//       );\n\n//       if (!validPassword) {\n//         throw new Error(\"Password is incorrect!\");\n//       }\n\n//       let loginuser = { email: args.email, password: validPassword };\n//       loginuser.password = validPassword;\n\n//       return loginuser;\n//     },\n\n//     verifyCreditCard: (_, args) => {\n      \n//       let creditCard = {\n//         cardHolderName: args.cardHolderName,\n//         cardNumber: args.cardNumber,\n//         cardMonth: args.cardMonth,\n//         cardYear: args.cardYear,\n//         cardCCV: args.cardCCV,\n//         cardZIP: args.cardZIP\n//       };\n\n//       const tokengen = jwt.sign(\n//         creditCard,\n//         \"JWT_SECRET_ROOKHOTELKIOSK_PLEASE_CHANGE_WHEN_READY\"\n//       );\n\n//       creditCard.token = tokengen;\n//       return creditCard;\n//     }\n//   }\n// };\n\nconst server = new ApolloServer({\n  typeDefs: schema,\n  resolvers: { \n    Query,\n    // Mutation,\n    // Subscription,\n    // User,\n    // Post,\n    // Comment\n  \n  },\n\n  // context: ( {req, res} ) => ({\n  //   toke: req.headers['auth-token']\n  // }),\n\n  introspection: true,\n  playground: true,\n  context: {\n    db,\n    pubSub\n  }\n});\nserver.applyMiddleware({ app });\n\napp.listen(port, () => {\n  console.log(`Express listening on port: ${server.graphqlPath} ${port}`);\n});\n"]}