{"version":3,"sources":["../../src/resolvers/Mutation.js"],"names":["Mutation","createUser","parent","args","info","db","emailTaken","users","some","user","email","data","Error","id","push","deleteUser","userIndex","findIndex","deletedUsers","splice","posts","filter","post","match","author","comments","comment","updateUser","find","name","age","createPost","pubsub","userExists","published","publish","mutation","deletePost","postIndex","updatePost","originalPost","title","body","createComment","postExists","deleteComment","commentIndex","deletedComment","updateComment","text","default"],"mappings":"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","file":"Mutation.js","sourcesContent":["import uuidv4 from 'uuid/v4'\n\nconst Mutation = {\n    createUser(parent, args, { db }, info) {\n        const emailTaken = db.users.some((user) => user.email === args.data.email)\n\n        if (emailTaken) {\n            throw new Error('Email taken')\n        }\n\n        const user = {\n            id: uuidv4(),\n            ...args.data\n        }\n\n        db.users.push(user)\n\n        return user\n    },\n    deleteUser(parent, args, { db }, info) {\n        const userIndex = db.users.findIndex((user) => user.id === args.id)\n\n        if (userIndex === -1) {\n            throw new Error('User not found')\n        }\n\n        const deletedUsers = db.users.splice(userIndex, 1)\n\n        db.posts = db.posts.filter((post) => {\n            const match = post.author === args.id\n\n            if (match) {\n                db.comments = db.comments.filter((comment) => comment.post !== post.id)\n            }\n\n            return !match\n        })\n        db.comments = db.comments.filter((comment) => comment.author !== args.id)\n\n        return deletedUsers[0]\n    },\n    updateUser(parent, args, { db }, info) {\n        const { id, data } = args\n        const user = db.users.find((user) => user.id === id)\n\n        if (!user) {\n            throw new Error('User not found')\n        }\n\n        if (typeof data.email === 'string') {\n            const emailTaken = db.users.some((user) => user.email === data.email)\n\n            if (emailTaken) {\n                throw new Error('Email taken')\n            }\n\n            user.email = data.email\n        }\n\n        if (typeof data.name === 'string') {\n            user.name = data.name\n        }\n\n        if (typeof data.age !== 'undefined') {\n            user.age = data.age\n        }\n\n        return user\n    },\n    createPost(parent, args, { db, pubsub }, info) {\n        const userExists = db.users.some((user) => user.id === args.data.author)\n\n        if (!userExists) {\n            throw new Error('User not found')\n        }\n\n        const post = {\n            id: uuidv4(),\n            ...args.data\n        }\n\n        db.posts.push(post)\n\n        if (args.data.published) {\n            pubsub.publish('post', { \n                post: {\n                    mutation: 'CREATED',\n                    data: post\n                }\n             })\n        }\n\n        return post\n    },\n    deletePost(parent, args, { db, pubsub }, info) {\n        const postIndex = db.posts.findIndex((post) => post.id === args.id)\n\n        if (postIndex === -1) {\n            throw new Error('Post not found')\n        }\n\n        const [post] = db.posts.splice(postIndex, 1)\n\n        db.comments = db.comments.filter((comment) => comment.post !== args.id)\n\n        if (post.published) {\n            pubsub.publish('post', {\n                post: {\n                    mutation: 'DELETED',\n                    data: post\n                }\n            })\n        }\n\n        return post\n    },\n    updatePost(parent, args, { db, pubsub }, info) {\n        const { id, data } = args\n        const post = db.posts.find((post) => post.id === id)\n        const originalPost = { ...post }\n\n        if (!post) {\n            throw new Error('Post not found')\n        }\n\n        if (typeof data.title === 'string') {\n            post.title = data.title\n        }\n\n        if (typeof data.body === 'string') {\n            post.body = data.body\n        }\n\n        if (typeof data.published === 'boolean') {\n            post.published = data.published\n\n            if (originalPost.published && !post.published) {\n                pubsub.publish('post', {\n                    post: {\n                        mutation: 'DELETED',\n                        data: originalPost\n                    }\n                })\n            } else if (!originalPost.published && post.published) {\n                pubsub.publish('post', {\n                    post: {\n                        mutation: 'CREATED',\n                        data: post\n                    }\n                })\n            }\n        } else if (post.published) {\n            pubsub.publish('post', {\n                post: {\n                    mutation: 'UPDATED',\n                    data: post\n                }\n            })\n        }\n\n        return post\n    },\n    createComment(parent, args, { db, pubsub }, info) {\n        const userExists = db.users.some((user) => user.id === args.data.author)\n        const postExists = db.posts.some((post) => post.id === args.data.post && post.published)\n\n        if (!userExists || !postExists) {\n            throw new Error('Unable to find user and post')\n        }\n\n        const comment = {\n            id: uuidv4(),\n            ...args.data\n        }\n\n        db.comments.push(comment)\n        pubsub.publish(`comment ${args.data.post}`, {\n            comment: {\n                mutation: 'CREATED',\n                data: comment\n            }\n        })\n\n        return comment\n    },\n    deleteComment(parent, args, { db, pubsub }, info) {\n        const commentIndex = db.comments.findIndex((comment) => comment.id === args.id)\n\n        if (commentIndex === -1) {\n            throw new Error('Comment not found')\n        }\n\n        const [deletedComment] = db.comments.splice(commentIndex, 1)\n        pubsub.publish(`comment ${deletedComment.post}`, {\n            comment: {\n                mutation: 'DELETED',\n                data: deletedComment\n            }\n        })\n\n        return deletedComment\n    },\n    updateComment(parent, args, { db, pubsub }, info) {\n        const { id, data } = args\n        const comment = db.comments.find((comment) => comment.id === id)\n\n        if (!comment) {\n            throw new Error('Comment not found')\n        }\n\n        if (typeof data.text === 'string') {\n            comment.text = data.text\n        }\n\n        pubsub.publish(`comment ${comment.post}`, {\n            comment: {\n                mutation: 'UPDATED',\n                data: comment\n            }\n        })\n\n        return comment\n    }\n}\n\nexport { Mutation as default }"]}