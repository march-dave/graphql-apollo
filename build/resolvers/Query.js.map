{"version":3,"sources":["../../src/resolvers/Query.js"],"names":["Query","getRoomTypes","parent","args","info","db","roomtypes","getRoomType","filtered","filter","item","id","me","hashed","password","email","default"],"mappings":";;;;;AAAA,IAAMA,QAAQ;;AAEV;AACA;AACA;AACA;AACA;;AAEAC,gBARU,wBAQGC,MARH,EAQWC,IARX,QAQyBC,IARzB,EAQ+B;AAAA,YAAZC,EAAY,QAAZA,EAAY;;AACtC,eAAOA,GAAGC,SAAV;AACF,KAVS;AAYVC,eAZU,uBAYEL,MAZF,EAYUC,IAZV,SAYwBC,IAZxB,EAY+B;AAAA,YAAbC,EAAa,SAAbA,EAAa;;AACrC,YAAMG,WAAWH,GAAGC,SAAH,CAAaG,MAAb,CAAqB;AAAA,mBAAUC,KAAKC,EAAL,KAAYR,KAAKQ,EAAnB,GAA0BD,IAA1B,GAAiC,IAAzC;AAAA,SAArB,CAAjB;AACA,eAAOF,SAAS,CAAT,CAAP;AACH,KAfS;AAiBVI,MAjBU,gBAiBL;AACD,eAAO;AACHC,oBAAQ,cADL;AAEHC,sBAAU,WAFP;AAGHC,mBAAO;AAHJ,SAAP;AAKH;AAvBS,CAAd;;QAwEkBC,O,GAAThB,K","file":"Query.js","sourcesContent":["const Query = {\n\n    // getUser(parent, args, { db }, info) {\n    //     if(!args.query) {\n    //         return db.users\n    //     }\n    // },\n\n    getRoomTypes(parent, args, { db }, info) {\n       return db.roomtypes\n    },\n\n    getRoomType(parent, args, { db }, info ) {\n        const filtered = db.roomtypes.filter( item => ( item.id === args.id ) ? item : null);\n        return filtered[0];\n    },\n\n    me() {\n        return {\n            hashed: '123122312nnn',\n            password: 'rookhotel',\n            email: 'dave@rookhotel.com'\n        }\n    },\n\n    // getget() {\n    //     return {\n    //         hashed: 'getget',\n    //         password: 'getget',\n    //         email: 'dave@rookhotel.com'\n    //     }\n    // }\n    // users(parent, args, { db }, info) {\n    //     if (!args.query) {\n    //         return db.users\n    //     }\n\n    //     return db.users.filter((user) => {\n    //         return user.name.toLowerCase().includes(args.query.toLowerCase())\n    //     })\n    // },\n    // posts(parent, args, { db }, info) {\n    //     if (!args.query) {\n    //         return db.posts\n    //     }\n\n    //     return db.posts.filter((post) => {\n    //         const isTitleMatch = post.title.toLowerCase().includes(args.query.toLowerCase())\n    //         const isBodyMatch = post.body.toLowerCase().includes(args.query.toLowerCase())\n    //         return isTitleMatch || isBodyMatch\n    //     })\n    // },\n    // comments(parent, args, { db }, info) {\n    //     return db.comments\n    // },\n    // me() {\n    //     return {\n    //         id: '123098',\n    //         name: 'Mike',\n    //         email: 'mike@example.com'\n    //     }\n    // },\n    // post() {\n    //     return {\n    //         id: '092',\n    //         title: 'GraphQL 101',\n    //         body: '',\n    //         published: false\n    //     }\n    // }\n}\n\nexport { Query as default }"]}